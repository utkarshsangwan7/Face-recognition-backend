#!/usr/bin/env node
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tracking = (/--tracking[=\s]+([^\s]*)/i).exec(process.argv.join(' '));
const insights = require("../lib/utils/app-insights");
const configStore = require("../lib/utils/config-store");
const trackingEnv = process.env.HINT_TRACKING;
let enableTracking;
if (tracking) {
    enableTracking = tracking[1] === 'on';
}
else if (trackingEnv) {
    enableTracking = trackingEnv === 'on';
}
if (typeof enableTracking !== 'undefined') {
    if (enableTracking) {
        const alreadyRun = configStore.get('run');
        const configured = insights.isConfigured();
        insights.enable();
        if (!configured) {
            if (!alreadyRun) {
                insights.trackEvent('FirstRun');
            }
            else {
                insights.trackEvent('SecondRun');
            }
        }
    }
    else {
        insights.disable();
    }
}
const cli = require("../lib/cli");
const app_insights_1 = require("../lib/utils/app-insights");
process.once('uncaughtException', async (err) => {
    console.error(err.message);
    console.error(err.stack);
    app_insights_1.trackException(err);
    await app_insights_1.sendPendingData();
    process.exit(1);
});
process.once('unhandledRejection', async (r) => {
    const reason = r;
    const source = reason && reason instanceof Error ? reason : reason.error;
    app_insights_1.trackException(source);
    await app_insights_1.sendPendingData();
    console.error(`Unhandled rejection promise:
    uri: ${source.uri}
    message: ${source.message}
    stack:
${source.stack}`);
    process.exit(1);
});
const run = async () => {
    process.exitCode = await cli.execute(process.argv);
    process.exit(process.exitCode);
};
run();
