"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const location_helpers_1 = require("./utils/location-helpers");
const category_1 = require("./enums/category");
class HintContext {
    constructor(hintId, engine, severity, options, meta, ignoredUrls) {
        this.id = hintId;
        this.options = options;
        this.meta = meta;
        this.engine = engine;
        this.severity = severity;
        this.ignoredUrls = ignoredUrls;
        Object.freeze(this);
    }
    get pageDOM() {
        return this.engine.pageDOM;
    }
    get pageContent() {
        return this.engine.pageContent;
    }
    get pageHeaders() {
        return this.engine.pageHeaders;
    }
    get targetedBrowsers() {
        return this.engine.targetedBrowsers;
    }
    get hintOptions() {
        if (Array.isArray(this.options)) {
            return this.options[1];
        }
        return null;
    }
    evaluate(source) {
        return this.engine.evaluate(source);
    }
    fetchContent(target, headers) {
        return this.engine.fetchContent(target, headers);
    }
    querySelectorAll(selector) {
        return this.engine.querySelectorAll(selector);
    }
    findInElement(element, content) {
        return location_helpers_1.findInElement(element, content);
    }
    findProblemLocation(element, content) {
        return location_helpers_1.findProblemLocation(element, { column: 0, line: 0 }, content);
    }
    async report(resource, message, options = {}) {
        const { codeSnippet, content, element, severity } = options;
        let position = options.location || null;
        let sourceCode = null;
        if (element) {
            position = await location_helpers_1.findProblemLocation(element, { column: 0, line: 0 }, content);
            sourceCode = (await element.outerHTML()).replace(/[\t]/g, '    ');
        }
        this.engine.report(this.id, (this.meta && this.meta.docs && this.meta.docs.category) ? this.meta.docs.category : category_1.Category.other, severity || this.severity, codeSnippet || sourceCode || '', position, message, resource);
    }
    on(event, listener) {
        this.engine.onHintEvent(this.id, event, listener);
    }
    isUrlIgnored(resource) {
        return this.ignoredUrls.some((urlIgnored) => {
            return urlIgnored.test(resource);
        });
    }
}
exports.HintContext = HintContext;
