import { IFormatterConstructor } from './types/formatters';
import { IConnectorConstructor } from './types/connector';
import { IParserConstructor } from './types/parser';
import { IHintConstructor } from './types/hints';
import { Severity } from './types/problems';
export * from './types/async-html';
export * from './types/connector';
export * from './types/events';
export * from './types/formatters';
export * from './types/json-parser';
export * from './types/network';
export * from './types/problems';
export * from './types/hints';
export * from './types/parser';
export * from './types/schema-validation-result';
export declare type HintSeverity = Severity | keyof typeof Severity;
export declare type HintConfig = HintSeverity | [HintSeverity, any];
export declare type HintsConfigObject = {
    [key: string]: HintConfig | HintConfig[];
};
export declare type ConnectorOptionsConfig = {
    waitFor?: number;
    watch?: boolean;
};
export declare type ConnectorConfig = {
    name: string;
    options?: ConnectorOptionsConfig;
};
export declare type IgnoredUrl = {
    domain: string;
    hints: string[];
};
export declare type UserConfig = {
    connector?: ConnectorConfig | string;
    extends?: string[];
    parsers?: string[];
    hints?: HintsConfigObject | [HintSeverity, HintConfig][];
    browserslist?: string | string[];
    hintsTimeout?: number;
    formatters?: string[];
    ignoredUrls?: IgnoredUrl[];
};
export declare type Resource = IConnectorConstructor | IFormatterConstructor | IHintConstructor;
export declare type CLIOptions = {
    _: string[];
    config: string;
    debug: boolean;
    format: string;
    help: boolean;
    init: boolean;
    ['output-file']: string;
    version: boolean;
    watch: boolean;
    formatters: string;
    hints: string;
};
export declare type NpmMaintainer = {
    email: string;
    username: string;
};
export declare type NpmPackage = {
    date: Date;
    description: string;
    keywords: string[];
    maintainers: NpmMaintainer[];
    name: string;
    version: string;
};
export declare type NpmPackageResult = {
    package: NpmPackage;
};
export declare type NpmSearchResults = {
    objects: NpmPackageResult[];
    total: number;
};
export declare type HintResources = {
    connector: IConnectorConstructor | null;
    formatters: IFormatterConstructor[];
    incompatible: string[];
    missing: string[];
    parsers: IParserConstructor[];
    hints: IHintConstructor[];
};
export declare type StringKeyOf<T> = Extract<keyof T, string>;
//# sourceMappingURL=types.d.ts.map