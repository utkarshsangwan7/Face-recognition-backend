"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class JSDOMAsyncHTMLDocument {
    constructor(document, dom) {
        this._document = document;
        this._dom = dom;
    }
    querySelectorAll(selector) {
        try {
            const elements = Array.from(this._document.querySelectorAll(selector))
                .map((element) => {
                return new JSDOMAsyncHTMLElement(element, this._dom);
            });
            return Promise.resolve(elements);
        }
        catch (e) {
            return Promise.resolve([]);
        }
    }
    pageHTML() {
        const documentElement = this._document.documentElement;
        return Promise.resolve(documentElement ? documentElement.outerHTML : '');
    }
}
exports.JSDOMAsyncHTMLDocument = JSDOMAsyncHTMLDocument;
class JSDOMAsyncHTMLElement {
    constructor(htmlelement, dom) {
        this._dom = dom;
        this._htmlelement = htmlelement;
        this._ownerDocument = new JSDOMAsyncHTMLDocument(htmlelement.ownerDocument, this._dom);
    }
    getAttribute(name) {
        return this._htmlelement.getAttribute(name);
    }
    getLocation() {
        try {
            const location = this._dom && this._dom.nodeLocation(this._htmlelement);
            return location && {
                column: location.startTag.col || location.startTag.startCol,
                line: (location.startTag.line || location.startTag.startLine) - 1
            } || null;
        }
        catch (e) {
            return null;
        }
    }
    isSame(element) {
        return this._htmlelement === element._htmlelement;
    }
    outerHTML() {
        return Promise.resolve(this._htmlelement.outerHTML);
    }
    get attributes() {
        return this._htmlelement.attributes;
    }
    get nodeName() {
        return this._htmlelement.nodeName;
    }
    get ownerDocument() {
        return this._ownerDocument;
    }
}
exports.JSDOMAsyncHTMLElement = JSDOMAsyncHTMLElement;
class JSDOMAsyncWindow {
    constructor(window, dom) {
        this._dom = dom;
        this._window = window;
        this._document = new JSDOMAsyncHTMLDocument(window.document, this._dom);
    }
    get document() {
        return this._document;
    }
    evaluate(source) {
        return this._window.eval(source);
    }
}
exports.JSDOMAsyncWindow = JSDOMAsyncWindow;
