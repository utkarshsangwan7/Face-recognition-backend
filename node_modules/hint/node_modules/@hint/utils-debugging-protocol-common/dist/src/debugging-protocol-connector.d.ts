/// <reference types="node" />
import { URL } from 'url';
import { HTMLDocument, HTMLElement, HttpHeaders } from '@hint/utils';
import { IConnector, Engine, ILauncher, NetworkData } from 'hint';
export declare class Connector implements IConnector {
    private _options;
    private _href;
    private _finalHref;
    private _server;
    private _client;
    private _requests;
    private _errorWithPage;
    private _dom;
    private _originalDocument;
    private _pendingResponseReceived;
    private _tabs;
    private _timeout;
    private _pid;
    private _targetNetworkData;
    private _launcher;
    private _waitForTarget;
    private _targetReceived;
    private _lockFile;
    private _isLocked;
    static schema: {
        additionalProperties: boolean;
        properties: {
            ignoreHTTPSErrors: {
                type: string;
            };
            launcherOptions: {
                type: string;
            };
            waitFor: {
                minimum: number;
                type: string;
            };
        };
    };
    constructor(engine: Engine, config: object, launcher: ILauncher);
    private getElementFromRequest;
    private onRequestWillBeSent;
    private onLoadingFailed;
    private emitFetchEnd;
    private onResponseReceived;
    private onLoadingFinished;
    private getClient;
    private lockFile;
    private unlockFile;
    private initiateComms;
    private onError;
    private onDisconnect;
    private enableNetworkEvents;
    private configureAndEnableCDP;
    private getFavicon;
    private processPendingResponses;
    private onLoadEventFired;
    collect(target: URL): Promise<unknown>;
    close(): Promise<void>;
    fetchContent(target: URL | string, customHeaders?: object): Promise<NetworkData>;
    private wrapRuntimeEvalErrorInBrowser;
    evaluate(code: string): Promise<any>;
    querySelectorAll(selector: string): HTMLElement[];
    readonly dom: HTMLDocument | undefined;
    readonly headers: HttpHeaders | undefined;
    readonly html: string;
}
//# sourceMappingURL=debugging-protocol-connector.d.ts.map