"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const semver = require("semver");
const browserToMDN = new Map([
    ['and_chr', 'chrome_android'],
    ['and_ff', 'firefox_android'],
    ['and_qq', 'qq_android'],
    ['and_uc', 'uc_android'],
    ['android', 'webview_android'],
    ['chrome', 'chrome'],
    ['edge', 'edge'],
    ['edge_mob', 'edge_mobile'],
    ['firefox', 'firefox'],
    ['ie', 'ie'],
    ['ios_saf', 'safari_ios'],
    ['node', 'nodejs'],
    ['opera', 'opera'],
    ['safari', 'safari'],
    ['samsung', 'samsunginternet_android']
]);
const coerce = (version) => {
    return semver.coerce(version) || version;
};
const isSupported = (support, prefix, rawVersion) => {
    const version = coerce(rawVersion);
    if (support.flags) {
        return 2;
    }
    if (prefix !== (support.prefix || '')) {
        return 0;
    }
    if (support.version_added === false) {
        return 0;
    }
    if (typeof support.version_removed === 'string' && semver.lte(coerce(support.version_removed), version)) {
        return 0;
    }
    if (support.version_added === true) {
        return 1;
    }
    if (typeof support.version_added === 'string') {
        return semver.lte(coerce(support.version_added), version) ? 1 : 0;
    }
    return 2;
};
const isBrowserUnsupported = (support, prefix, version) => {
    const browserSupport = Array.isArray(support) ? support : [support];
    let status = 2;
    for (const simpleSupport of browserSupport) {
        switch (isSupported(simpleSupport, prefix, version)) {
            case 1:
                return false;
            case 0:
                status = 0;
                break;
            case 2:
            default:
                break;
        }
    }
    return status === 0;
};
exports.getUnsupportedBrowsers = (feature, prefix, browsers) => {
    if (!feature || !feature.__compat) {
        return null;
    }
    const support = feature.__compat.support;
    const unsupported = [];
    for (const browser of browsers) {
        const [name, versionStr] = browser.split(' ');
        const mdnBrowser = browserToMDN.get(name);
        const browserSupport = support[mdnBrowser];
        const versions = versionStr.split('-');
        if (browserSupport) {
            const isUnsupported = versions.some((version) => {
                return isBrowserUnsupported(browserSupport, prefix, version);
            });
            if (isUnsupported) {
                unsupported.push(browser);
            }
        }
    }
    return unsupported.length ? unsupported : null;
};
